// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: event.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :execresult
INSERT INTO events (
    id, organization_id, title, description,
    max_registrant, date, start_time, end_time
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateEventParams struct {
	ID             string
	OrganizationID string
	Title          string
	Description    sql.NullString
	MaxRegistrant  sql.NullInt32
	Date           time.Time
	StartTime      sql.NullTime
	EndTime        sql.NullTime
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEvent,
		arg.ID,
		arg.OrganizationID,
		arg.Title,
		arg.Description,
		arg.MaxRegistrant,
		arg.Date,
		arg.StartTime,
		arg.EndTime,
	)
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, organization_id, title, img, description, registrant, max_registrant, date, start_time, end_time, created_at, updated_at FROM events WHERE id = ?
`

func (q *Queries) GetEventByID(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Title,
		&i.Img,
		&i.Description,
		&i.Registrant,
		&i.MaxRegistrant,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, organization_id, title, img, description, registrant, max_registrant, date, start_time, end_time, created_at, updated_at FROM events
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Title,
			&i.Img,
			&i.Description,
			&i.Registrant,
			&i.MaxRegistrant,
			&i.Date,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
