// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :execresult
INSERT INTO users (
    id, email, password, oauth_id, phone,
    name, role, address, img, is_premium, lvl,
    dob, institution, created_at, updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type AddUserParams struct {
	ID          string
	Email       string
	Password    sql.NullString
	OauthID     sql.NullString
	Phone       sql.NullString
	Name        string
	Role        string
	Address     sql.NullString
	Img         sql.NullString
	IsPremium   sql.NullBool
	Lvl         sql.NullInt32
	Dob         sql.NullTime
	Institution sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.OauthID,
		arg.Phone,
		arg.Name,
		arg.Role,
		arg.Address,
		arg.Img,
		arg.IsPremium,
		arg.Lvl,
		arg.Dob,
		arg.Institution,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createOrganizer = `-- name: CreateOrganizer :execresult
INSERT INTO organizers (id, organization_id, bank_name, bank_account, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateOrganizerParams struct {
	ID             string
	OrganizationID sql.NullString
	BankName       sql.NullString
	BankAccount    sql.NullString
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) CreateOrganizer(ctx context.Context, arg CreateOrganizerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrganizer,
		arg.ID,
		arg.OrganizationID,
		arg.BankName,
		arg.BankAccount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const emailExists = `-- name: EmailExists :one
SELECT COUNT(1) FROM users WHERE email = ?
`

func (q *Queries) EmailExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, emailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password, oauth_id, name, role, phone, img, is_premium, lvl, dob, institution, created_at, updated_at, username, address FROM users WHERE email = ?
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.OauthID,
		&i.Name,
		&i.Role,
		&i.Phone,
		&i.Img,
		&i.IsPremium,
		&i.Lvl,
		&i.Dob,
		&i.Institution,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Address,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, password, oauth_id, name, role, phone, img, is_premium, lvl, dob, institution, created_at, updated_at, username, address FROM users WHERE id = ?
`

func (q *Queries) FindUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.OauthID,
		&i.Name,
		&i.Role,
		&i.Phone,
		&i.Img,
		&i.IsPremium,
		&i.Lvl,
		&i.Dob,
		&i.Institution,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Address,
	)
	return i, err
}

const getOrganizer = `-- name: GetOrganizer :one
SELECT id, organization_id, bank_name, bank_account, created_at, updated_at FROM organizers WHERE id = ?
`

func (q *Queries) GetOrganizer(ctx context.Context, id string) (Organizer, error) {
	row := q.db.QueryRowContext(ctx, getOrganizer, id)
	var i Organizer
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.BankName,
		&i.BankAccount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :execresult
UPDATE users
SET username = ?, name = ?, address = ?, dob = ?, institution = ?
WHERE id = ?
`

type UpdateUserByIDParams struct {
	Username    sql.NullString
	Name        string
	Address     sql.NullString
	Dob         sql.NullTime
	Institution sql.NullString
	ID          string
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserByID,
		arg.Username,
		arg.Name,
		arg.Address,
		arg.Dob,
		arg.Institution,
		arg.ID,
	)
}
