// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organization.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addOrganization = `-- name: AddOrganization :execresult
INSERT INTO organizations (
    id, user_id, name, description, header_img, profile_img
) VALUES (?, ?, ?, ?, ?, ?)
`

type AddOrganizationParams struct {
	ID          string
	UserID      string
	Name        string
	Description string
	HeaderImg   sql.NullString
	ProfileImg  sql.NullString
}

func (q *Queries) AddOrganization(ctx context.Context, arg AddOrganizationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addOrganization,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.HeaderImg,
		arg.ProfileImg,
	)
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = ?
`

func (q *Queries) DeleteOrganization(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const findFollowedOrganizations = `-- name: FindFollowedOrganizations :many
SELECT o.id, o.name, o.description, o.header_img, o.profile_img, o.created_at, o.updated_at, o.user_id FROM organizations o
INNER JOIN followers f ON o.id = f.organization_id
WHERE f.follower_id = ?
`

func (q *Queries) FindFollowedOrganizations(ctx context.Context, followerID string) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, findFollowedOrganizations, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HeaderImg,
			&i.ProfileImg,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrganizaitonFollowers = `-- name: FindOrganizaitonFollowers :many
SELECT f.follower_id, u.name, u.img, f.followed_at
FROM followers f
INNER JOIN users u ON f.follower_id = u.id
WHERE f.organization_id = ?
`

type FindOrganizaitonFollowersRow struct {
	FollowerID string
	Name       string
	Img        sql.NullString
	FollowedAt sql.NullTime
}

func (q *Queries) FindOrganizaitonFollowers(ctx context.Context, organizationID string) ([]FindOrganizaitonFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrganizaitonFollowers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrganizaitonFollowersRow
	for rows.Next() {
		var i FindOrganizaitonFollowersRow
		if err := rows.Scan(
			&i.FollowerID,
			&i.Name,
			&i.Img,
			&i.FollowedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrganizationById = `-- name: FindOrganizationById :one
SELECT id, name, description, header_img, profile_img, created_at, updated_at, user_id FROM organizations WHERE id = ?
`

func (q *Queries) FindOrganizationById(ctx context.Context, id string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, findOrganizationById, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HeaderImg,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const findOrganizationByUserId = `-- name: FindOrganizationByUserId :one
SELECT id, name, description, header_img, profile_img, created_at, updated_at, user_id FROM organizations WHERE user_id = ?
`

func (q *Queries) FindOrganizationByUserId(ctx context.Context, userID string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, findOrganizationByUserId, userID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HeaderImg,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const followOrganizaiton = `-- name: FollowOrganizaiton :execresult
INSERT INTO followers (
    organization_id, follower_id
) VALUES (
    ?, ?
)
`

type FollowOrganizaitonParams struct {
	OrganizationID string
	FollowerID     string
}

func (q *Queries) FollowOrganizaiton(ctx context.Context, arg FollowOrganizaitonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, followOrganizaiton, arg.OrganizationID, arg.FollowerID)
}

const isFollowed = `-- name: IsFollowed :one
SELECT COUNT(1) FROM followers WHERE organization_id = ? AND follower_id = ?
`

type IsFollowedParams struct {
	OrganizationID string
	FollowerID     string
}

func (q *Queries) IsFollowed(ctx context.Context, arg IsFollowedParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isFollowed, arg.OrganizationID, arg.FollowerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isOrganizationExist = `-- name: IsOrganizationExist :one
SELECT COUNT(1) FROM organizations INNER JOIN users ON organizations.user_id = users.id WHERE user_id = ?
`

func (q *Queries) IsOrganizationExist(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isOrganizationExist, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listOrganization = `-- name: ListOrganization :many
SELECT id, name, description, header_img, profile_img, created_at, updated_at, user_id FROM organizations
`

func (q *Queries) ListOrganization(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganization)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HeaderImg,
			&i.ProfileImg,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowOrganization = `-- name: UnfollowOrganization :exec
DELETE FROM followers WHERE organization_id = ? AND follower_id = ?
`

type UnfollowOrganizationParams struct {
	OrganizationID string
	FollowerID     string
}

func (q *Queries) UnfollowOrganization(ctx context.Context, arg UnfollowOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, unfollowOrganization, arg.OrganizationID, arg.FollowerID)
	return err
}

const updateOrganization = `-- name: UpdateOrganization :execresult
UPDATE organizations
SET name = ?, description = ?, header_img = ?, profile_img = ?
WHERE id = ?
`

type UpdateOrganizationParams struct {
	Name        string
	Description string
	HeaderImg   sql.NullString
	ProfileImg  sql.NullString
	ID          string
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateOrganization,
		arg.Name,
		arg.Description,
		arg.HeaderImg,
		arg.ProfileImg,
		arg.ID,
	)
}
