// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addPost = `-- name: AddPost :execresult
INSERT INTO posts (
    id, organization_id, content, image_content, created_at, updated_at
) VALUES (?, ?, ?, ?, ?, ?)
`

type AddPostParams struct {
	ID             string
	OrganizationID string
	Content        string
	ImageContent   sql.NullString
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPost,
		arg.ID,
		arg.OrganizationID,
		arg.Content,
		arg.ImageContent,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const findPostById = `-- name: FindPostById :one
SELECT id, organization_id, content, image_content, created_at, updated_at FROM posts WHERE id = ?
`

func (q *Queries) FindPostById(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, findPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Content,
		&i.ImageContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPostByOrganization = `-- name: FindPostByOrganization :many
SELECT id, organization_id, content, image_content, created_at, updated_at FROM posts WHERE organization_id = ?
`

func (q *Queries) FindPostByOrganization(ctx context.Context, organizationID string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, findPostByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Content,
			&i.ImageContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT id, organization_id, content, image_content, created_at, updated_at from posts
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Content,
			&i.ImageContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
